import { GoogleGenAI, type ContentListUnion, type ContentUnion, type File } from "@google/genai";

export interface IGeminiClient {
  generateText: (contents: ContentListUnion, cacheId?: string) => Promise<string>;
  uploadFile: (file: Blob) => Promise<File>;
  createCache: (contents: ContentListUnion, systemPrompt?: ContentUnion) => Promise<string>;
}

export class GeminiClient implements IGeminiClient {
  private client: GoogleGenAI;

  constructor(apiKey: string) {
    this.client = new GoogleGenAI({ apiKey });
  }

  async generateText(contents: ContentListUnion, cacheId?: string): Promise<string> {
    const response = await this.client.models.generateContent({
      contents,
      model: "gemini-2.0-flash",
      config: {
        cachedContent: cacheId,
      }
    });
    if (!response.text) {
      throw new Error("No text generated by Gemini model");
    }
    return response.text;
  }

  async uploadFile(file: Blob): Promise<File> {
    const response = await this.client.files.upload({
      file,
    });
    return response;
  }

  async createCache(contents: ContentListUnion, systemInstruction?: ContentUnion): Promise<string> {
    const response = await this.client.caches.create({
      model: "gemini-2.0-flash",
      config: {
        contents,
        systemInstruction,
      },
    });
    if (!response.name) {
      throw new Error("Failed to create cache in Gemini");
    }
    return response.name;
  }
}
